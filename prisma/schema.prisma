datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  newspapers    Newspaper[] // <-- this is the opposite relation
}

// NextAuth Account
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

// NextAuth Session
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

// Newspaper uploaded by a user
model Newspaper {
  id         Int       @id @default(autoincrement())
  title      String
  fileUrl    String
  uploadedAt DateTime  @default(now())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  summaries  Summary[]
}

// Generated summary for a newspaper
model Summary {
  id          Int       @id @default(autoincrement())
  newspaper   Newspaper @relation(fields: [newspaperId], references: [id])
  newspaperId Int
  content     String // generated summary text
  createdAt   DateTime  @default(now())
}
